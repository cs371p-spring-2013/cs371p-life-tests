// -------------------------
// projects/life/RunLife.c++
// Copyright (C) 2013
// Glenn P. Downing
// -------------------------

/*
To run the program:
% make RunLife
% make run

To configure Doxygen:
doxygen -g
That creates the file Doxyfile.
Make the following edits:
EXTRACT_ALL = YES
EXTRACT_PRIVATE = YES
EXTRACT_STATIC = YES
GENERATE_LATEX = NO

To document the program:
doxygen Doxyfile
*/

// --------
// includes
// --------

#include <cassert> // assert
#include <iostream> // cout, endl
#include <stdexcept> // invalid_argument, out_of_range
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include "Cell.h"
#include "ConwayCell.h"
#include "FredkinCell.h"
#include "Life.h"

using namespace std;

// ----
// main
// ----

// a couple of stream reader helper functions to keep the 
// mess down.
template<typename T>
void streamReaderCF (istream& is, vector<vector<T>>& grid) {
	char buff[256];
	is.getline(buff, 256);
	int length = atoi(buff);
	is.getline(buff, 256);
	int width = atoi(buff);
	for (int i = 0; i < length; ++i) {
		is.getline(buff, 256);
		vector<T> x;
		for (int j = 0; j < width; ++j) {
			if (buff[j] == '.') {
				x.push_back(T(false));
			} else if (buff[j] == '*') {
				x.push_back(T(true));
			} else if (buff[j] == '-') {
				x.push_back(T(false));
			} else if (buff[j] == '0') {
				x.push_back(T(true));
			} else {
				cout << "error reading input stream\n";
				exit(1);
			}
		}
		grid.push_back(x);
	}
}


void streamReaderC (istream& is, vector<vector<Cell>>& grid) {
	char buff[256];
	is.getline(buff, 256);
	int length = atoi(buff);
	is.getline(buff, 256);
	int width = atoi(buff);
	for (int i = 0; i < length; ++i) {
		is.getline(buff, 256);
		vector<Cell> x;
		for (int j = 0; j < width; ++j) {
			if (buff[j] == '.') {
				x.push_back(Cell(new ConwayCell(false)));
			} else if (buff[j] == '*') {
				x.push_back(Cell(new ConwayCell(true)));
			} else if (buff[j] == '-') {
				x.push_back(Cell(new FredkinCell(false)));
			} else if (buff[j] == '0') {
				x.push_back(Cell(new FredkinCell(true)));
			} else {
				cout << "error reading input stream\n";
				exit(1);
			}
		}
		grid.push_back(x);
	}
}

int main () {
    //using namespace std;
    ios_base::sync_with_stdio(false); // turn off synchronization with C I/O

    // ------------------
    // Conway Cell 109x69
    // ------------------

    try {
        cout << "*** Life<ConwayCell> 109x69 ***" << endl;
        cout << endl;
        /*
		read RunLifeConway.in // assume all Conway cells
		Simulate 283 moves.
		Print the first 10 grids (i.e. 0, 1, 2...9).
		Print the 283rd grid.
		Simulate 40 moves.
		Print the 323rd grid.
		Simulate 2177 moves.
		Print the 2500th grid.
		*/
		
		fstream f("RunLifeConway.in");
		vector<vector<ConwayCell>> grid;
		streamReaderCF<ConwayCell>(f, grid);
		f.close();
		
		Life<ConwayCell> life(grid);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(274);
		cout << life << endl;
		life.play(40);
		cout << life << endl;
		life.play(2177);
		cout << life << endl;
		
        }
    	catch (const invalid_argument&) {
        	assert(false);}
    	catch (const out_of_range&) {
        	assert(false);}
        	
   	// ------------------
    // Conway Cell 50x50 #1
    // ------------------
    cout << "*** Life<ConwayCell> 50x50 #1 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..........................*.......................\n\
.........................*........................\n\
........................***.......................\n\
.......................*..*.......................\n\
.....................*.*..*.......................\n\
.....................*..**........................\n\
........................*.........................\n\
.........................*........................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n");

    	istringstream iss(str);
    	vector<vector<ConwayCell>> grid;
		streamReaderCF<ConwayCell>(iss, grid);
		
		Life<ConwayCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
		
    
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Conway Cell 50x50 #2
    // ------------------
    cout << "*** Life<ConwayCell> 50x50 #2 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
*.................................................\n\
.*................................................\n\
..*...............................................\n\
...*..............................................\n\
....*.............................................\n\
.....*............................................\n\
......*...........................................\n\
.......*..........................................\n\
........*.........................................\n\
.........*........................................\n\
..........*.......................................\n\
...........*......................................\n\
............*.....................................\n\
.............*....................................\n\
..............*...................................\n\
...............********************...............\n\
................*................*................\n\
.................*..............*.................\n\
..................*............*..................\n\
...................*..........*...................\n\
....................*........*....................\n\
.....................*......*.....................\n\
......................*....*......................\n\
.......................*..*.......................\n\
........................**........................\n\
........................**........................\n\
.......................*..*.......................\n\
......................*....*......................\n\
.....................*......*.....................\n\
....................*........*....................\n\
...................*..........*...................\n\
..................*............*..................\n\
.................*..............*.................\n\
................*................*................\n\
...............********************...............\n\
...................................*..............\n\
....................................*.............\n\
.....................................*............\n\
......................................*...........\n\
.......................................*..........\n\
........................................*.........\n\
.........................................*........\n\
..........................................*.......\n\
...........................................*......\n\
............................................*.....\n\
.............................................*....\n\
..............................................*...\n\
...............................................*..\n\
................................................*.\n\
.................................................*\n");
    	
    	istringstream iss(str);
    	vector<vector<ConwayCell>> grid;
		streamReaderCF<ConwayCell>(iss, grid);
    
    	Life<ConwayCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Conway Cell 50x50 #3
    // ------------------
    cout << "*** Life<ConwayCell> 50x50 #3 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
.......................*..........................\n\
.....................*.*.*........................\n\
......................***.........................\n\
.....................*****........................\n\
......................***.........................\n\
...................***.*.***......................\n\
..................*.*..*.*.*......................\n\
.......................*..........................\n\
.......................*..........................\n\
......................***.........................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n");
    	
    	istringstream iss(str);
    	vector<vector<ConwayCell>> grid;
		streamReaderCF<ConwayCell>(iss, grid);
    
    	Life<ConwayCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Conway Cell 50x50 #4
    // ------------------
    cout << "*** Life<ConwayCell> 50x50 #4 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
**************************************************\n\
..................................................\n\
**************************************************\n\
..................................................\n\
**************************************************\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n\
..................................................\n");
    	
    	istringstream iss(str);
    	vector<vector<ConwayCell>> grid;
		streamReaderCF<ConwayCell>(iss, grid);
    
    	Life<ConwayCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }

    //--------------------------------------------------------------------------------------

    // ------------------
    // Fredkin Cell 20x20
    // ------------------

    try {
        cout << "*** Life<FredkinCell> 20x20 ***" << endl;
        /*
		read RunLifeFredkin.in // assume all Fredkin cells
		Simulate 5 moves.
		Print every grid (i.e. 0, 1, 2...5)
		*/
		
		vector<vector<FredkinCell>> grid;
		fstream f("RunLifeFredkin.in");
		streamReaderCF<FredkinCell>(f, grid);
		
		Life<FredkinCell> life(grid);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		
        }
    	catch (const invalid_argument&) {
       		assert(false);}
    	catch (const out_of_range&) {
        	assert(false);}

	// ------------------
    // Fredkin Cell 50x50 #1
    // ------------------
    cout << "*** Life<FredkinCell> 50x50 #1 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
------------------------000-----------------------\n\
------------------------0-0-----------------------\n\
------------------------0-0-----------------------\n\
------------------------000-----------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n");
    	
    	istringstream iss(str);
    	vector<vector<FredkinCell>> grid;
		streamReaderCF<FredkinCell>(iss, grid);
    
    	Life<FredkinCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Fredkin Cell 50x50 #2
    // ------------------
    cout << "*** Life<FredkinCell> 50x50 #2 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
0-------------------------------------------------\n\
-0------------------------------------------------\n\
--0-----------------------------------------------\n\
---0----------------------------------------------\n\
----0---------------------------------------------\n\
-----0--------------------------------------------\n\
------0-------------------------------------------\n\
-------0------------------------------------------\n\
--------0-----------------------------------------\n\
---------0----------------------------------------\n\
----------0---------------------------------------\n\
-----------0--------------------------------------\n\
------------0-------------------------------------\n\
-------------0------------------------------------\n\
--------------0-----------------------------------\n\
---------------00000000000000000000---------------\n\
----------------0----------------0----------------\n\
-----------------0--------------0-----------------\n\
------------------0------------0------------------\n\
-------------------0----------0-------------------\n\
--------------------0--------0--------------------\n\
---------------------0------0---------------------\n\
----------------------0----0----------------------\n\
-----------------------0--0-----------------------\n\
------------------------00------------------------\n\
------------------------00------------------------\n\
-----------------------0--0-----------------------\n\
----------------------0----0----------------------\n\
---------------------0------0---------------------\n\
--------------------0--------0--------------------\n\
-------------------0----------0-------------------\n\
------------------0------------0------------------\n\
-----------------0--------------0-----------------\n\
----------------0----------------0----------------\n\
---------------00000000000000000000---------------\n\
-----------------------------------0--------------\n\
------------------------------------0-------------\n\
-------------------------------------0------------\n\
--------------------------------------0-----------\n\
---------------------------------------0----------\n\
----------------------------------------0---------\n\
-----------------------------------------0--------\n\
------------------------------------------0-------\n\
-------------------------------------------0------\n\
--------------------------------------------0-----\n\
---------------------------------------------0----\n\
----------------------------------------------0---\n\
-----------------------------------------------0--\n\
------------------------------------------------0-\n\
-------------------------------------------------0\n");
    	
    	istringstream iss(str);
    	vector<vector<FredkinCell>> grid;
		streamReaderCF<FredkinCell>(iss, grid);
    
    	Life<FredkinCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Fredkin Cell 50x50 #3
    // ------------------
    cout << "*** Life<FredkinCell> 50x50 #3 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
-----------------------0--------------------------\n\
---------------------0-0-0------------------------\n\
----------------------000-------------------------\n\
---------------------00000------------------------\n\
----------------------000-------------------------\n\
-------------------000-0-000----------------------\n\
------------------0-0--0-0-0----------------------\n\
-----------------------0--------------------------\n\
-----------------------0--------------------------\n\
----------------------000-------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n");
    	
    	istringstream iss(str);
    	vector<vector<FredkinCell>> grid;
		streamReaderCF<FredkinCell>(iss, grid);
    
    	Life<FredkinCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Fredkin Cell 50x50 #4
    // ------------------
    cout << "*** Life<FredkinCell> 50x50 #4 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
00000000000000000000000000000000000000000000000000\n\
--------------------------------------------------\n\
00000000000000000000000000000000000000000000000000\n\
--------------------------------------------------\n\
00000000000000000000000000000000000000000000000000\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n");
    	
    	istringstream iss(str);
    	vector<vector<FredkinCell>> grid;
		streamReaderCF<FredkinCell>(iss, grid);
    
    	Life<FredkinCell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }

	//----------------------------------------------------------------------------------------

    // ----------
    // Cell 20x20
    // ----------

    try {
        cout << "*** Life<Cell> 20x20 ***" << endl;
        /*
		read RunLifeCell.in // assume all Fredkin cells
		Simulate 5 moves.
		Print every grid (i.e. 0, 1, 2...5)
		*/
		
		vector<vector<Cell>> grid;
		fstream f("RunLifeCell.in");
		streamReaderC(f, grid);
		
		Life<Cell> life(grid);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
		life.play(1);
		cout << life << endl;
        }
    	catch (const invalid_argument&) {
        	assert(false);}
    	catch (const out_of_range&) {
        	assert(false);}

	// ------------------
    // Cell 50x50 #1
    // ------------------
    cout << "*** Life<Cell> 50x50 #1 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
------------------------000-----------------------\n\
------------------------0-0-----------------------\n\
------------------------0-0-----------------------\n\
------------------------000-----------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n");
    	
    	istringstream iss(str);
    	vector<vector<Cell>> grid;
		streamReaderC(iss, grid);
    
    	Life<Cell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Cell 50x50 #2
    // ------------------
    cout << "*** Life<Cell> 50x50 #2 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
0-------------------------------------------------\n\
-0------------------------------------------------\n\
--0-----------------------------------------------\n\
---0----------------------------------------------\n\
----0---------------------------------------------\n\
-----0--------------------------------------------\n\
------0-------------------------------------------\n\
-------0------------------------------------------\n\
--------0-----------------------------------------\n\
---------0----------------------------------------\n\
----------0---------------------------------------\n\
-----------0--------------------------------------\n\
------------0-------------------------------------\n\
-------------0------------------------------------\n\
--------------0-----------------------------------\n\
---------------00000000000000000000---------------\n\
----------------0----------------0----------------\n\
-----------------0--------------0-----------------\n\
------------------0------------0------------------\n\
-------------------0----------0-------------------\n\
--------------------0--------0--------------------\n\
---------------------0------0---------------------\n\
----------------------0----0----------------------\n\
-----------------------0--0-----------------------\n\
------------------------00------------------------\n\
------------------------00------------------------\n\
-----------------------0--0-----------------------\n\
----------------------0----0----------------------\n\
---------------------0------0---------------------\n\
--------------------0--------0--------------------\n\
-------------------0----------0-------------------\n\
------------------0------------0------------------\n\
-----------------0--------------0-----------------\n\
----------------0----------------0----------------\n\
---------------00000000000000000000---------------\n\
-----------------------------------0--------------\n\
------------------------------------0-------------\n\
-------------------------------------0------------\n\
--------------------------------------0-----------\n\
---------------------------------------0----------\n\
----------------------------------------0---------\n\
-----------------------------------------0--------\n\
------------------------------------------0-------\n\
-------------------------------------------0------\n\
--------------------------------------------0-----\n\
---------------------------------------------0----\n\
----------------------------------------------0---\n\
-----------------------------------------------0--\n\
------------------------------------------------0-\n\
-------------------------------------------------0\n");
    	
    	istringstream iss(str);
    	vector<vector<Cell>> grid;
		streamReaderC(iss, grid);
    
    	Life<Cell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Cell 50x50 #3
    // ------------------
    cout << "*** Life<Cell> 50x50 #3 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
-----------------------0--------------------------\n\
---------------------0-0-0------------------------\n\
----------------------000-------------------------\n\
---------------------00000------------------------\n\
----------------------000-------------------------\n\
-------------------000-0-000----------------------\n\
------------------0-0--0-0-0----------------------\n\
-----------------------0--------------------------\n\
-----------------------0--------------------------\n\
----------------------000-------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n");
    	
    	istringstream iss(str);
    	vector<vector<Cell>> grid;
		streamReaderC(iss, grid);
    
    	Life<Cell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }
    
    // ------------------
    // Cell 50x50 #4
    // ------------------
    cout << "*** Life<Cell> 50x50 #4 ***" << endl;
    cout << endl;
    try {
    
    	string str("50\n50\n\
00000000000000000000000000000000000000000000000000\n\
--------------------------------------------------\n\
00000000000000000000000000000000000000000000000000\n\
--------------------------------------------------\n\
00000000000000000000000000000000000000000000000000\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n\
--------------------------------------------------\n");
    	
    	istringstream iss(str);
    	vector<vector<Cell>> grid;
		streamReaderC(iss, grid);
    
    	Life<Cell> life(grid);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		life.play(10);
		cout << life << endl;
		
		life.play(950);
		cout << life << endl;
    	
    } catch (const invalid_argument&) {
    	assert(false);
    } catch (const out_of_range&) {
    	assert(false);
    }

    return 0;}

