// -------------------------
// projects/life/RunLife.c++
// Copyright (C) 2013
// Glenn P. Downing
// -------------------------

/*
To run the program:
    % make RunLife
    % make run

To configure Doxygen:
    doxygen -g
That creates the file Doxyfile.
Make the following edits:
    EXTRACT_ALL            = YES
    EXTRACT_PRIVATE        = YES
    EXTRACT_STATIC         = YES
    GENERATE_LATEX         = NO

To document the program:
    doxygen Doxyfile
*/

// --------
// includes
// --------

#include <cassert>   // assert
#include <iostream>  // cout, endl
#include <stdexcept> // invalid_argument, out_of_range
#include <fstream>
#include <stdlib.h>
#include <sstream>
#include <unordered_set>

#include "Life.h"
#include "ConwayCell.h"
#include "FredkinCell.h"
#include "Cell.h"

// ----
// main
// ----

void SimulateConwayCellLife(istream&, int, int, int, unordered_set<int>);
void SimulateFredkinCellLife(istream&, int, int, int, unordered_set<int>);
void SimulateCellLife(istream&, int, int, int, unordered_set<int>);

int main () {
    using namespace std;
    ios_base::sync_with_stdio(false); // turn off synchronization with C I/O

	// ------------------
	// Conway Cell 109x69
	// ------------------

        /*
        read RunLifeConway.in // assume all Conway cells
        Simulate 283 moves.
        Print the first 10 grids (i.e. 0, 1, 2...9).
        Print the 283rd grid.
        Simulate 40 moves.
        Print the 323rd grid.
        Simulate 2177 moves.
        Print the 2500th grid.
        */
	ifstream conwayCellFile("RunLifeConway.in");
	unordered_set<int> specificGrids;
	specificGrids.insert(283);
	specificGrids.insert(323);
	specificGrids.insert(2500);
	SimulateConwayCellLife(conwayCellFile, 2500, 0, 9, specificGrids);

	// ------------------
	// Fredkin Cell 20x20
	// ------------------

	/*
        read RunLifeFredkin.in // assume all Fredkin cells
        Simulate 5 moves.
        Print every grid (i.e. 0, 1, 2...5)
        */
	ifstream fredkinFile("RunLifeFredkin.in");
	SimulateFredkinCellLife(fredkinFile, 5, 0, 5, unordered_set<int>());


	// ----------
	// Cell 20x20
	// ----------

        /*
        read RunLifeCell.in // assume all Fredkin cells
        Simulate 5 moves.
        Print every grid (i.e. 0, 1, 2...5)
        */

	ifstream cellFile("RunLifeCell.in");
	SimulateCellLife(cellFile, 5, 0, 5, unordered_set<int>());



	// ------------------
	// Conway Cell 5x5
	// ------------------

	istringstream conwayCellString5x5;
	conwayCellString5x5.str(
                "5\n"
                "5\n"
                ".....\n"
                "..*..\n"
                "...*.\n"
                ".***.\n"
                ".....\n");
	SimulateConwayCellLife(conwayCellString5x5, 5, 0, 5, unordered_set<int>());

	// ------------------
	// Conway Cell 60x60
	// ------------------

	istringstream conwayCellString60x60;
    conwayCellString60x60.str("60\n"
                "60\n"
                "..*.........................................................\n"
				"...*........................................................\n"
				".***........................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n"
				"............................................................\n");
    SimulateConwayCellLife(conwayCellString60x60, 60, -1, -1, unordered_set<int>({0,10,20,30,40,50,60}));

	// ------------------
	// Conway Cell 2x2
	// ------------------
	istringstream iss;
	iss.str("2\n"
		"2\n"
		"*.\n"
		"..\n");
	SimulateConwayCellLife(iss, 5, 0, 5, unordered_set<int>());


    // Conway Cell 5x5
    istringstream issConway5x5;
    issConway5x5.str("5\n"
            "5\n"
            ".....\n"
            ".***.\n"
            ".*...\n"
            ".*...\n"
            ".*...\n");
    SimulateConwayCellLife(issConway5x5, 5, 0, 5, unordered_set<int>());


	/*Begin custom FredkinCell tests - ConwayCells just replaced by FredkinCells*/

	// ------------------
	// Fredkin Cell 5x5
	// ------------------

	istringstream fredkinCellString5x5;
	fredkinCellString5x5.str(
                "5\n"
                "5\n"
                ".....\n"
                "..*..\n"
                "...*.\n"
                ".***.\n"
                ".....\n");
	SimulateFredkinCellLife(fredkinCellString5x5, 5, 0, 5, unordered_set<int>());

	// ------------------
	// Fredkin Cell 60x60
	// ------------------

	istringstream fredkinCellString60x60;
    fredkinCellString60x60.str("60\n"
                "60\n"
				"--0---------------------------------------------------------\n"
				"---0--------------------------------------------------------\n"
				"-000--------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n");
    SimulateFredkinCellLife(fredkinCellString60x60, 60, -1, -1, unordered_set<int>({0,10,20,30,40,50,60}));

	// ------------------
	// Fredkin Cell 2x2
	// ------------------
	istringstream iss2;
	iss2.str("2\n"
		 "2\n"
		 "0-\n"
		 "--\n");
	SimulateFredkinCellLife(iss2, 5, 0, 5, unordered_set<int>());


    // Fredkin Cell 5x5
    istringstream issFredkin5x5;
    issFredkin5x5.str("5\n"
            "5\n"
            "-----\n"
            "-000-\n"
            "-0---\n"
            "-0---\n"
            "-0---\n");
    SimulateFredkinCellLife(issFredkin5x5, 5, 0, 5, unordered_set<int>());


	/*Begin custom Cell tests - FredkinCells just replaced by Cells instantiated as FredkinCells*/

	// ------------------
	// Fredkin Cell 5x5
	// ------------------

	istringstream CellString5x5;
	CellString5x5.str(
                "5\n"
                "5\n"
                ".....\n"
                "..*..\n"
                "...*.\n"
                ".***.\n"
                ".....\n");
	SimulateCellLife(CellString5x5, 5, 0, 5, unordered_set<int>());

	// ------------------
	// Fredkin Cell 60x60
	// ------------------

	istringstream CellString60x60;
    	CellString60x60.str("60\n"
                		"60\n"
				"--0---------------------------------------------------------\n"
				"---0--------------------------------------------------------\n"
				"-000--------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n"
				"------------------------------------------------------------\n");
    SimulateCellLife(CellString60x60, 60, -1, -1, unordered_set<int>({0,10,20,30,40,50,60}));

	// ------------------
	// Fredkin Cell 2x2
	// ------------------
	istringstream iss3;
	iss3.str("2\n"
		 "2\n"
		 "0-\n"
		 "--\n");
	SimulateCellLife(iss3, 5, 0, 5, unordered_set<int>());


    // Fredkin Cell 5x5
    istringstream iss5x5;
    iss5x5.str("5\n"
            "5\n"
            "-----\n"
            "-000-\n"
            "-0---\n"
            "-0---\n"
            "-0---\n");
    SimulateCellLife(iss5x5, 5, 0, 5, unordered_set<int>());

    return 0;}

void SimulateConwayCellLife(istream& iss, int generations, int gridMin, int gridMax, unordered_set<int> specificGrids)
{
    try
    {
	int rows;
	int columns;
	char cell;
	iss >> rows >> columns;

	cout << "*** Life<ConwayCell> "<< rows << "x" << columns << " ***" << endl;

        Life<ConwayCell> life(rows,columns);

        vector<ConwayCell> conwayCells;

        for(int i=0; i<rows; i++)
        {
            for(int j=0; j<columns; j++)
            {
                iss >> cell;
                switch(cell)
                {
                    case '.':
                        conwayCells.push_back(ConwayCell(i, j, false));
                        break;
                    case '*':
                        conwayCells.push_back(ConwayCell(i, j, true));
                        break;
                }
            }
        }

        int length = conwayCells.size();
        for(int i=0; i<length; i++)
        {
            life.Add(conwayCells[i]);
        }

	life.Simulate(generations, gridMin, gridMax, specificGrids);
    }
    catch (const invalid_argument&)
    {
        assert(false);
    }
    catch (const out_of_range&)
    {
        assert(false);
    }
}

void SimulateFredkinCellLife(istream& iss, int generations, int gridMin, int gridMax, unordered_set<int> specificGrids)
{
    try
    {
	int rows;
	int columns;
	char cell;
	iss >> rows >> columns;

	cout << "*** Life<FredkinCell> "<< rows << "x" << columns << " ***" << endl;

        Life<FredkinCell> life(rows,columns);

        vector<FredkinCell> fredkinCells;

        for(int i=0; i<rows; i++)
        {
            for(int j=0; j<columns; j++)
            {
                iss >> cell;
		    if(cell == '-')
		    {
		        fredkinCells.push_back(FredkinCell(i, j, false, 0));
		    }
		    else
		    {
			int age = atoi(&cell);
			fredkinCells.push_back(FredkinCell(i, j, true, age));
		    }
            }
        }

        int length = fredkinCells.size();
        for(int i=0; i<length; i++)
        {
            life.Add(fredkinCells[i]);
        }

	life.Simulate(generations, gridMin, gridMax, specificGrids);
    }
    catch (const invalid_argument&)
    {
        assert(false);
    }
    catch (const out_of_range&)
    {
        assert(false);
    }
}

void SimulateCellLife(istream& iss, int generations, int gridMin, int gridMax, unordered_set<int> specificGrids)
{
    try
    {
	int rows;
	int columns;
	char cell;
	iss >> rows >> columns;

	cout << "*** Life<Cell> "<< rows << "x" << columns << " ***" << endl;

        Life<Cell> life(rows,columns);

        vector<Cell> fredkinCells;

        for(int i=0; i<rows; i++)
        {
            for(int j=0; j<columns; j++)
            {
                iss >> cell;
		    if(cell == '-')
		    {
		        fredkinCells.push_back(new FredkinCell(i, j, false, 0));
		    }
		    else
		    {
			int age = atoi(&cell);
			fredkinCells.push_back(new FredkinCell(i, j, true, age));
		    }
            }
        }

        int length = fredkinCells.size();
        for(int i=0; i<length; i++)
        {
            life.Add(fredkinCells[i]);
        }

	life.Simulate(generations, gridMin, gridMax, specificGrids);

    }
    catch (const invalid_argument&)
    {
        assert(false);
    }
    catch (const out_of_range&)
    {
        assert(false);
    }
}
